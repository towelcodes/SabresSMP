on script load:
    load yaml "plugins/Skript/globalpvp.yml" as "glpvp"
    set {_saved} to yaml value "pvp_enabled" from "glpvp"
    if {_saved} is set:
        set {globalpvp.enabled} to {_saved}
    else:
        set {globalpvp.enabled} to false
    delete {globalpvptimer.duration}
    delete {globalpvptimer.remaining}
    delete {globalpvptimer.action}
    set {graceperiod_disable} to false

on join:
    {joined::%player's uuid%} is not set
    if {glovalpvptimer.remaining} is not set:
        # the player gets their own grace period
        gracePeriod(player, 3600)
    else if {globalpvptimer.remaining} < 3600:
        # the player gets their own grace period
        gracePeriod(player, 3600)
    set {joined::%player's uuid%} to true

on damage of entity by entity:
    attacker is a player
    victim is a player
    if {globalpvp.enabled} is false:
        cancel event
    else if {singlepvp.disabled::%victim's uuid%} is set:
        cancel event
    else if {singlepvp.disabled::%attacker's uuid%} is set:
        cancel event

function gracePeriod(player: player, duration: number):
    if {graceperiod_disable} is true:
        send "not giving grace period to %{_player}% because it is disabled" to console
    else:
        send "giving grace period to %{_player}% for %{_duration}%s" to console
        send "&a&lGRACE PERIOD &rYou have been granted a grace period, as you joined late. Your PVP will be disabled." to {_player}
        send "Your grace period ticks down &aeven when you are offline&f, so make use of it." to {_player}
        set {singlepvp.disabled::%{_player}'s uuid%} to {_duration}
        loop {_duration} times:
            if {singlepvp.stop::%{_player}'s uuid%} is set:
                delete {singlepvp.stop::%{_player}'s uuid%}
                delete {singlepvp.disabled::%{_player}'s uuid%}
                stop
            wait 1 second
            subtract 1 from {singlepvp.disabled::%{_player}'s uuid%}
        delete {singlepvp.disabled::%{_player}'s uuid%}
        send "&c&lYour PVP is now active!" to {_player}
        play sound "entity.wither.spawn" to {_player}

function setPvpState(enabled: boolean):
    set {globalpvp.enabled} to {_enabled}
    if {_enabled} is true:
        play sound "entity.wither.spawn" to all players
        send "&c&lPVP is now enabled!" to all players
    else:
        send "&a&lPVP is now disabled!" to all players
    load yaml "plugins/Skript/globalpvp.yml" as "glpvp"
    set yaml value "pvp_enabled" from "glpvp" to {_enabled}
    save yaml "glpvp"

function pad(n: number) :: string:
    if {_n} < 10:
        return "0%{_n}%"
    return "%{_n}%"

function displayTime(time: integer) :: string:
    # set {_ts} to "%{_secs}% seconds" parsed as timespan

    # set {_h} to floor({_ts}.hours + {_ts}.days * 24)
    # set {_m} to {_ts}.minutes
    # set {_s} to {_ts}.seconds

    set {_h} to floor({_time} / 3600)
    set {_m} to floor((mod({_time}, 3600)) / 60)
    set {_s} to mod({_time}, 60)

    if {_h} > 0:
        set {_hstr} to pad({_h})
        set {_mstr} to pad({_m})
        set {_sstr} to pad({_s})
        return "%{_hstr}%:%{_mstr}%:%{_sstr}%"
    if {_m} > 0:
        set {_mstr} to pad({_m})
        set {_sstr} to pad({_s})
        return "%{_mstr}%:%{_sstr}%"
    # only secs left, no padding
    return "%{_s}%s"

    # set {_text} to "%{_hr}%:%{_min}%:%{_sec}%"
    # set {_time::*} to split {_text} at ":"
    # filter {_time::*} to match:
    #     input is not "0"
    # if size of {_time::*} is 1:
    #     return "%last element of {_time::*}%s"
    # set {_out} to join {_time::*} with ":"
    # return "%{_out}%"

command /grace <boolean>:
    permission: globalpvp.grace
    trigger:
        set {graceperiod_disable} to arg 1

command /greset <offlineplayer>:
    permission: globalpvp.reset
    trigger:
        delete {joined::%arg 1's uuid%}
        send "deleted player join for %arg 1%"

command /gpvp [<text>]:
    permission: globalpvp.toggle
    trigger:
        if arg 1 is "on":
            setPvpState(true)
        else if arg 1 is "off":
            setPvpState(false)
        else:
            send "global pvp is %{globalpvp.enabled}%" to sender

command /gpvptimer <number> <text>:
    permission: globalpvp.timer
    trigger:
        # set {_timeArg::*} to split arg 1 at ":"
        # set {_unitCount} to size of {_timeArg::*}

        # if {_unitCount} = 3:
        #     set {_hours} to {_timeArg::1} parsed as integer
        #     set {_minutes} to {_timeArg::2} parsed as integer
        #     set {_seconds} to {_timeArg::3} parsed as integer
        # else if {_unitCount} = 2:
        #     set {_hours} to 0
        #     set {_minutes} to {_timeArg::1} parsed as integer
        #     set {_seconds} to {_timeArg::2} parsed as integer
        # else if {_unitCount} = 1:
        #     set {_hours} to 0
        #     set {_minutes} to 0
        #     set {_seconds} to {_timeArg::1} parsed as integer
        # else:
        #     send "&cusage: /globalpvptimer <seconds|mm:ss|hh:mm:ss> <enable|disable>" to sender
        #     stop

        # set {_total} to {_seconds} + ({_minutes} * 60) + ({_hours} * 3600)
        set {_total} to arg 1
        if {_total} <= 0:
            send "&cduration must be > 0 seconds." to sender
            stop

        if arg 2 is "enable":
            set {globalpvptimer.action} to true
        else if arg 2 is "disable":
            set {globalpvptimer.action} to false
        else:
            send "&cenable or disable" to sender
            stop

        set {globalpvptimer.duration} to {_total}
        set {globalpvptimer.remaining} to {_total}
        
        broadcast "&c&lPVP will be %arg 2%d in %displayTime({_total})%!"

        loop {_total} times:
            if {globalpvptimer.stop} is not set:
                wait 1 second
                subtract 1 from {globalpvptimer.remaining}
            else:
                delete {globalpvptimer.stop}
                stop
        if {globalpvptimer.action} is true:
            setPvpState(true)
        else:
            setPvpState(false)
        delete {globalpvptimer.duration}
        delete {globalpvptimer.remaining}
        delete {globalpvptimer.action}

command /gpvpstoptimer:
    permission: globalpvp.timer
    trigger:
        set {globalpvptimer.stop} to true
        delete {globalpvptimer.duration}
        delete {globalpvptimer.remaining}
        delete {globalpvptimer.action}
        send "stopping" to sender

command /graceperiod <player> <number>:
    permission: globalpvp.graceperiod
    trigger:
        gracePeriod(arg 1, arg 2)
        send "giving %arg 1% grace period of %arg 2%s"

command /graceperiodcancel <player>:
    permission: globalpvp.graceperiod
    trigger:
        set {singlepvp.stop::%arg 1's uuid%} to true
        delete {singlepvp.disabled::%arg 1's uuid%}
        send "removed grace period for %arg 1%"

placeholderapi placeholder with the prefix "gpvp":
    if the identifier is "state":
        if {globalpvptimer.action} is set:
            set the result to "pending"
        else if {globalpvp.enabled} is true:
            set the result to "enabled"
        else:
            set the result to "disabled"
    else if the identifier is "target":
        if {globalpvptimer.action} is true:
            set the result to "enabled"
        else if {globalpvptimer.action} is false:
            set the result to "disabled"
        else:
            set the result to ""
    else if the identifier is "timer":
        if {globalpvptimer.duration} is not set:
            set the result to "none"
        else:
            set {_total} to {globalpvptimer.remaining}
            set the result to displayTime({_total})
    else if the identifier is "graceperiod":
        if {singlepvp.disabled::%player's uuid%} is set:
            set the result to displayTime({singlepvp.disabled::%player's uuid%})
        else:
            set the result to ""
    else if the identifier is "graceperiod_active":
        if {singlepvp.disabled::%player's uuid%} is set:
            set the result to "true"
        else:
            set the result to "false"
