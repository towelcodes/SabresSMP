options:
    world: "world"
    nether: "world_nether"
    # cx: 107
    # cz: 26

on skript load:
    set {world} to world border of world({@world})
    # set {nether} to world border of world({@wbnether})

command /startshrink <number> <number> <number>:
    permission: wb.admin
    usage: /startshrink <start> <shrink/sec> <end>
    trigger:
        # set {world} to world border of world("world")
        # set {nether} to world border of world("world_nether")
        set {wb::rate} to arg 2
        set {wb::target} to arg 3
        # set diameter of world border {world} to arg 1
        # set diameter of world border {nether} to (arg 1 / 8)
        shrink world border of world {@world} to arg 1
        shrink world border of world {@nether} to (arg 1 / 8)
        send "moving wb started at %arg 1% to %arg 3% at %arg 2% blocks per second"

command /stopshrink:
    permission: wb.admin
    trigger:
        delete {wb::rate}
        send "stopped wb moving"

every 1 second:
    if {wb::rate} is set:
        set {_cur} to diameter of world border {world}
        set {_new} to {_cur} - {wb::rate}
        if {_new} <= {wb::target}:
            send "world border shrink stopped" to console
            delete {wb::rate}
            delete {wb::stop}
        else:
            shrink world border of world {@world} to {_new} over 1 second
            shrink world border of world {@nether} to ({_new} / 8) over 1 second
            # set diameter of world border {world} to {_new}
            # set diameter of world border {nether} to ({_new} / 8)

function formatTimeBasic(sec: number) :: text:
    if {_sec} >= 3600:
        set {_h} to floor({_sec} / 3600)
        return "%{_h}%h"
    else if {_sec} >= 60:
        set {_m} to floor({_sec} / 60)
        return "%{_m}%m"
    else:
        return "%floor({_sec})%s"

placeholderapi placeholder with the prefix "wb":
    if the identifier is "size":
        set the result to ceil(diameter of world border {world})
    else if the identifier is "safe_until":
        if {wb::rate} is not set:
            set the result to "-2" # no movement
        else:
            set {_x} to player's x-coordinate
            set {_z} to player's z-coordinate
            set {_c} to {world}'s center
            # set {_cx} to x-coordinate of {_c}
            # set {_cz} to z-coordinate of {_c}
            set {_cx} to 0
            set {_cz} to 0
            set {_size} to diameter of world border {world}
            set {_r} to ({_size} / 2)

            set {_dx} to abs({_x} - {_cx})
            set {_dz} to abs({_z} - {_cz})

            set {_dist} to ({_r} - max({_dx}, {_dz}))
            set {_rate} to {wb::rate}
            set {_rateRad} to ({_rate} / 2)

            if {_dist} <= 0: 
                set result to "-1" # -1 indicates player is in border
            else if max({_x}, {_z}) <= ({wb::target} / 2):
                set result to "-2" # safe indefinitely
            else:
                set {_seconds} to ({_dist} / {_rateRad})
                # check with daycycle
                set result to formatTimeBasic({_seconds})